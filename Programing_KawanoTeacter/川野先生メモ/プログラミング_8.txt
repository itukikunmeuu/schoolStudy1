デザインパターン
①Singletonパターン　
 　(一人っ子パターン)
  ⇒そのアプリケーションの中で実体がひとつしかない
　　ということを保証するクラス←シングルトンクラス
　　「実体がある」←そのオブジェクトのためにメモリを消費している
　　　そのクラスのsizeof(class)分だけメモリが使われる
　　実体　＝　インスタンスとも言います

　　「型(struct とか classとか)」と「実体」は違います。
　　型が単なるプログラム言語上の約束事なので「概念」みたいなものです。
　　概念は、メモリを消費していません。これがメモリを消費して変数なりなんなりに
　　割り当てられたときに「実体化」します

　　int; ←メモリを消費していない・
　　int a; //sizeof(int)だけメモリを確保して、それを変数aとして使う
        　　//←実体化している。aとして扱える。
         int* p; //これはメモリはsizeof(int*)だけ消費しています。
　　　　　//ただしintの実体はありません。これはintの実体のアドレスを
　　　　　//格納できる変数を宣言し、アドレス格納体の実体がある状態
　　int* p = new int; //これはどこかのアドレスにsizeof(int)を確保して
　　　　　//そのアドレスをpに代入している
　　　　　//intの実体がある

　　で、シングルトンクラスの実体は、アプリケーションで一つなので
　　違うメモリアドレスに二つ存在してはならない・
　　要はこのメモリを使用すると、どこから使っても同じ実体をさし示す
　　そのためには
　　①使用者側にnewをさせない。
　　②使用者側に参照やポインタ以外で宣言させない
　　が必要になります

このためにシングルトンクラスはコンストラクタをprivateにして
「外部からコンストラクタを呼び出せなくする」
　　クラスを自身のメモリを確保するときに自動でコンストラクタを呼びます
　　class T;
    T t;//メモリ確保

　　このメモリ確保というのは、どちらもコンストラクタを呼び出します。
　　C++ではクラスを宣言やnewで実体かしようとする場合は
　　T*　t=(T*)mallic(sizeof(T));
☆mallocというのはC言語の命令で単純にメモリを確保してアドレスを返すだけの関数です。
つまりコンストラクタをコールしているわけです・
T t;
→　malloc(sizeof(T));
    t.T();//コンストラクタを関数として読んでいます。
※こうは書きましたが、実はコンストラクタの呼び出し時とメモリ確保は
同時に行われていると思ってください。
なので、コンストラクタを封じられると、呼び出し側はTの型を確保することができません。

これを使用します。つまり、コンストラクタをprivateにすると使用者側ではその変数の宣言もnewもできません
ただし、privateでも、自分自身だけはコンストラクタを使用できるため
この性質を使用して、
①コンストラクタはprivate
②staticインスタンスを返す関数はpublic
にして、外側からは②の関数を通してしかそのクラスの実態にアクセスできないようにしtます

で、static変数とstatic関数について、
staticは(静的)といういみで、メモリを確保したらそこに居続ける
ローカル変数だろいうがなんだろいうが同じアドレスを見続け、
スコープ外に出ても、メモリの内容を覚えている
static変数はその変数のアドレスが同一なので、
ローカルstatic変数はその変数のアドレスが同一なので、
どこからアクセスしても同じものと言えます。←シングルトンの制約に
ちょうどいい性質

staticメンバ関数：
通常のメンバ関数はクラスが実体化する目では呼び出すことができません
ところが、staticメンバ関数は実行時にすでにアドレスが確定して
いるため実体化されてなくても呼び出すことができます。

class C{
   public:
     void FuncA();
     static void FuncB();
}

FuncAはCが実体化しない限りアドレスが書くてしないので呼び出せない
C::FuncA();//どこにあるのかわからない。
これはだめ、呼び出せません。
C::FuncB();//staticのためすでにアドレスが確定しているため
　　　　　　//呼び出せます。

なお、通常のメンバ変数の呼び出しは
C　ｃ;
c.FuncA（）;
c.FuncB();
のように使いますが。これはひだりがわがへんすうなので、こういう風に使える
C.FuncBは文法上にかけない




・先生発言
コンストラクタをint にすればいいとかは問題のもとになりやすい
意味を理解してintを使用する






・自主勉強
